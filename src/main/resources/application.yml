spring:
  application:
    name: databaseevent
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    database: H2
    show_sql: true
#    generate-ddl: true
    properties:
      hibernate:
        format_sql: true # To beautify or pretty print the SQL
#        ddl-auto: validate # not to overwrite my schema (if you had schema.sql scripts). Usually hibernate looks at the entities and generates schema based on those entities
        ddl-auto: create
  datasource:
    url: jdbc:h2:mem:mydb
    username: sa
    password: password
    driverClassName: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console # URL to access this console http://localhost:9006/databaseevent/h2-console. Change the JDBC URL to whats above and login with sa/password
      settings:
        trace: false
        web-allow-others: false

  cloud:
    stream:
      bindings:
        input:
#          contentType: application/*+avro
          destination: customer-topic
          group: self-group

      kafka:
        binder:
          brokers: localhost:9092
          consumerProperties:
          producerProperties:
          autoCreateTopics: false
#          configuration:
#            schema.registry.url: http://localhost:8081

        bindings:
          input:
            consumer:
              ackmode: MANUAL
              useNativeDecoding: true
              configuration:
                key:
                  deserializer: org.apache.kafka.common.serialization.StringDeserializer
                value:
                  deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer

      stream:
        bindings:
          input:
            contentType: application/*+avro
      schemaRegistryClient:
        endpoint: http://localhost:8081

server:
  port: 9006
  servlet:
    context-path: /databaseevent
